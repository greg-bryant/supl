gallery.supl

---------------------------

.sequence 'gallery app'

------------------

These are the aspects which connect and define the app:

a configuration for the platform
the server:
 a storage facility
 a cycle of access to storage on the server
the client (in our case delivered by the server):
 a cycle of commands on the client
 a display of those commands
 a styling of those displays

Some of these are things which, even if trivial, have default values, so
ignoring them is not necessarily keeping them out of the picture.

Alternative stem differentiations:
1) platform connections
2) API connections
3) server
4) client
5) storage

------------------

.step 1 'minimal stubs'

---------

.p 'start'
.nt 'platform config'
.nt 'server'
.nt 'server client bridge'
.nt 'client'
.nt 'client style'

------------------

.step 2 'minimal end-to-end code'

---------

.p 'platform config' 'app.yaml'

---
.nt 'platform config values'
<<<

application: gallery
version: 1
runtime: python27
api_version: 1
threadsafe: true

>>>
---

---
.nt 'platform config handlers'
<<<

handlers:
- url: /main\.js
  static_files: main.js
  upload: main\.js
  secure: always
  redirect_http_response_code: 301
- url: /main\.css
  static_files: main.css
  upload: main\.css
  secure: always
  redirect_http_response_code: 301
- url: /.*
  script: gallery.app
  secure: always
  redirect_http_response_code: 301

>>>
---

---------

.p 'server' 'gallery.py'

---
.nt 'server includes'
<<<

# gallery.py

import os
import cgi
import webapp2
import time

from google.appengine.ext import db
from google.appengine.ext.webapp import template
from google.appengine.api import users

>>>
---

---

.nt 'server db schema'
<<<

# DB Schema -- to do

>>>
---

---
.nt 'server delivers client'
<<<

class MainPage(webapp2.RequestHandler):
    def get(self):

    	template_values = {
    	}

    	path = os.path.join(os.path.dirname(__file__), 'index.html')
    	self.response.out.write(template.render(path, template_values))

>>>
---

---
.nt 'server db crud cycle'
<<<

# access API - to do

>>>
---

---
.nt 'server demux'
<<<

app = webapp2.WSGIApplication(
                                     [('/', MainPage)],
                                            debug=True)

>>>
---


---------

.p 'server client bridge' 'index.html'

---
.nt 'to launch javascript'
<<<

<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
        <title>gallery</title>
        <script type="text/javascript" charset="utf-8" src="main.js"></script>
        <link type="text/css" rel="stylesheet" href="main.css"/>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    </head>
    <body onload="main_init()">
        <div class="whole">
            <div id="header">initial text</div>
        </div>
    </body>
</html>

>>>
---
---------

---------
.p 'client' 'main.js'

---
.nt 'client central handler / event loop'
<<<

var event_queue = [];
var the_event = null;

function main_init() {
	 event_queue.push({'name':'main_page','delay':2000});
	 central_handler();
}

function main_page() {
	 $('#header').html("Main Page");
}

// CENTRAL_HANDLER:
//  called by onload and setTimeout
function central_handler() {

    if (!(event_queue.length > 0)) {
      return;
    }
    the_event = event_queue.shift();

    // call event
    window[the_event.name]();

    // only loop until the stack is empty
    if (event_queue.length > 0) {
       setTimeout(function () {central_handler();},
       			     the_event.delay);
    }
}

>>>
---

---
.nt 'client crud'
<<<
	// api use - to do
>>>
---

---
.nt 'client display'
<<<
	// display data - to do
>>>
---
---------

---------
.p 'client style' 'main.css'

---
.nt 'heading'
<<<

body {
  margin: 25px;
  background-color: rgb(240,240,240);
  font-family: arial, sans-serif;
  font-size: 12px;
}

h1 {
  font-size: 24px;
  font-weight: bold;
  margin-top: 10px;
}

/* classes */
.whole { color: white; 
       	 height: 100%;
	 width: 100%;
}

/* ids */
#header { color: purple;
	  font-size: 24px;
  	  font-weight: bold;
	 }

>>>
---

---------

------------------

.step 3 'data'


---------
.p 
---------


---------
.p
---------


---------
.p
---------


------------------

.step 4 'authentication and roles'

------------------

.step 5 'ungenerate infrastructure'

The generative approach to DB ETL (extract, transform, load).
Need to be able to retrieve so you can regenerate and repopulate.

------------------

.step 6 'dashboards'

------------------





