gallery.supl

order your considerations

---------------------------

.sequence 'gallery app'

------------------

These are the aspects which connect and define the app:

a configuration for the platform
the server:
 a storage facility
 a cycle of access to storage on the server
the client (in our case delivered by the server):
 a cycle of commands on the client
 a display of those commands
 a styling of those displays

Some of these are things which, even if trivial, have default values, 
so ignoring them is not necessarily keeping them out of the picture.

------------------------------------------------------------------------

.step 1 'minimal stubs'

---------

.p 'start'
.nt 'platform configuration'
.nt 'server'
.nt 'server client bridge'
.nt 'client'
.nt 'client style'

------------------------------------------------------------------------


------------------------------------------------------------------------

.step 2 'minimal end-to-end code'

---------

.p 'platform configuration' 'app.yaml'

---
.nt 'platform configuration values'
<<<

application: gallery
version: 1
runtime: python27
api_version: 1
threadsafe: true

>>>
---

---
.nt 'platform configuration handlers'
<<<

handlers:
- url: /main\.js
  static_files: main.js
  upload: main\.js
  secure: always
  redirect_http_response_code: 301
- url: /main\.css
  static_files: main.css
  upload: main\.css
  secure: always
  redirect_http_response_code: 301
- url: /.*
  script: gallery.app
  secure: always
  redirect_http_response_code: 301

>>>
---

---------

.p 'server' 'gallery.py'

---
.nt 'server externals'
<<<

# gallery.py

import os
import cgi
import webapp2
import logging 
import datetime
import time
import re
import base64
import urllib
import random
import hashlib
import unicodedata

from google.appengine.ext import db
from google.appengine.ext.webapp import template
from google.appengine.api import users

>>>
---

---

.nt 'server schema'
<<<

# Database Schema -- to do

>>>
---

---

.nt 'server auth'
<<<

# authentication, authorization, identity, login, logout  -- to do

>>>
---

---
when our URL is hit, deliver the client-side html file.
this will then request server resources, as described in app.yaml,
but this module will not see those requests.

.nt 'server delivers client'
<<<

class MainPage(webapp2.RequestHandler):
    def get(self):

    	template_values = {
    	}

    	path = os.path.join(os.path.dirname(__file__), 'index.html')
    	self.response.out.write(template.render(path, template_values))

>>>
---

---
aside from the initial file, and some authorization data, this server
module responds solely with JSON data -- which is what a typical API looks like.

.nt 'server db crud cycle'
<<<

# access API - to do

>>>
---

---
.nt 'server routing'
<<<

app = webapp2.WSGIApplication(
                                     [('/', MainPage)],
                                            debug=True)

>>>
---


---------

.p 'server client bridge' 'index.html'

---
This is the index.html file returned to the browser.
It does as little as possible, in order to bootstrap
the client-side application: the css file, the js file,
and loads the main_init routine from the javascript file.

.nt 'to launch javascript'
<<<

<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
        <title>gallery</title>
        <script type="text/javascript" charset="utf-8" src="main.js"></script>
        <link type="text/css" rel="stylesheet" href="main.css"/>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    </head>
    <body onload="main_init()">
        <div id="whole" class="whole">
            <div id="header">initial text</div>
        </div>
    </body>
</html>

>>>
---
---------

---------
This is the main javascript file for the client browser,
loaded and called by the index.html file.

.p 'client' 'main.js'

---
browser javascript programs MUST have a an event queue and
central handler, or else actions will get stalled by system
requests. this fact is hidden by libraries like angular.

.nt 'client event queue declarations'
<<<

var event_queue = [];
var the_event = null;

// p_ev is "push event"
function p_ev(event) {
	 event_queue.push({'name':event,'delay':2000});
	 central_handler();
}

>>>

ultimately, there should be some kind of json structure,
which defines the application, i.e. main_page->(header,content,footer)
content->(photo_list) ... which then gets read by a 'structure engine'.

.nt 'client application structure'
<<<
// called by html when page loads
function main_init() {
	 // p_ev puts functions on the event queue
	 p_ev('main_page',2000);
}

// write something on the main page
function main_page() {
	 $('#header').html("Main Page");
}
>>>

.nt 'client event loop engine -- central handler'
<<<

// CENTRAL_HANDLER:
//  called by onload and setTimeout
//  empties the event queue, one event at a time

function central_handler() {

    if (!(event_queue.length > 0)) {
      return;
    }
    the_event = event_queue.shift();

    // call event
    window[the_event.name]();

    // only loop until the stack is empty
    if (event_queue.length > 0) {
       setTimeout(function () {central_handler();},
       			     the_event.delay);
    }
}

>>>
---

---
.nt 'client crud'
<<<
	// routines that use the server api - to do
>>>
---

---
.nt 'client display'
<<<
	// display the data - to do
>>>
---
---------

---------
.p 'client style' 'main.css'

---
just a little css so far

.nt 'heading'
<<<

body {
  margin: 25px;
  background-color: rgb(240,240,240);
  font-family: arial, sans-serif;
  font-size: 12px;
}

h1 {
  font-size: 24px;
  font-weight: bold;
  margin-top: 10px;
}

/* classes */
.whole { color: black; 
       	 height: 100%;
	 width: 100%;
}

/* ids */
#header { color: purple;
	  font-size: 24px;
  	  font-weight: bold;
	 }

>>>
---

---
.nt 'display style'
---

---------

------------------------------------------------------------------------


------------------------------------------------------------------------

.step 3 'data'

---------

.p 'server schema'

our 'gallery app' is: 
a splash page (optional)
linked to a set of thumbnail pages (with captions)
linked to photo pages
so the db is one type:
photo: with caption text, and a generated thumbnail

.nt 'photo schema'
<<<
class Photo(db.Model):
    caption = db.StringProperty()
    image = db.BlobProperty()
    url = db.StringProperty(multiline=True)
    timestamp = db.DateTimeProperty(auto_now_add=True)

>>>

.nt 'more schemas'
<<<

# stub for later schemas

>>>

---------

---------
.p 'server db crud cycle'

.nt 'create'
<<<

class createPhoto(webapp2.RequestHandler):
    def post(self):

        imgdata = self.request.get('imgdata')
        caption = self.request.get('caption')
        adjusted_url = 'uploaded_' + str(time.time()) 

        photo = Photo()
        photo.image = db.Blob(images.resize(imgdata,500,378,allow_stretch=True))
        photo.url = adjusted_url
	photo.caption = caption
        photo.put()

        self.response.out.write("GOOD")
        return

>>>

.nt 'read one'
<<<

# API: get one photo, with key passed from photo gallery,
#      which is built with other API call: getPhotoList 
class getPhoto(webapp2.RequestHandler):
    def get(self,string):

        uncoded = urllib.unquote(string)
        adjusted = string.replace('%2F','/')
        result = db.GqlQuery("SELECT * FROM Photo WHERE key = :1 LIMIT 1",
                    adjusted).fetch(1)
        if (len(result) > 0):
            self.response.headers['Content-Type'] = 'image/png'
            self.response.out.write(result[0].image)
        else:
            photo = Photo()
            photo.image = db.Blob(urlfetch.Fetch(uncoded).content)
            photo.url = adjusted
            photo.put()

            self.response.headers['Content-Type'] = 'image/png'
            self.response.out.write(photo.image)
>>>

.nt 'read list'
<<<
# API: get list of photos
#
class getPhotoList(webapp2.RequestHandler):
    def get(self):

        photos = db.GqlQuery("SELECT * FROM Photo")
        overview = '{ \'name\':\'photos\',' + '\'value\':\'\' }'

        all_n = '[' + overview
        k = 0
        i = 0
        for p in photos:
            if i > 0:
	                all_n = all_n + ','
            all_n = all_n + '{ \'name\':' + '\'' + re.escape(p.name) + '\','
            all_n = all_n + '\'key\':' + '\'' + p.key() + '\' }'
            i = i + 1

        all_n = all_n + ']'
        return_string = all_n
        logging.debug(return_string)
        self.response.write(return_string)
>>>

.nt 'updateCaption'
<<<

class updateCaption(webapp2.RequestHandler):
    def get(self,string,caption):

       key = Photo.get(string)
       key.caption = caption
       key.put()


>>>

.nt 'delete'
<<<

class deletePhoto(webapp2.RequestHandler):
    def get(self,string):

       key = Photo.get(string)
       key.delete()

>>>
---------


---------
.p 'server routing'

.nt 'URL routing'
<<<

app = webapp2.WSGIApplication(
                                     [('/', MainPage),
				     ('/logout/', LogoutPage),
				     ('/login/', LoginPage),
				     ('/CreatePhoto/',createPhoto),
				     ('/getPhotoList/',getPhotoList),
				     ('/getPhoto/(.*)',getPhoto),
				     ('/updateCaption/(.*)',updateCaption),
				     ('/deletePhoto/(.*)',deletePhoto)],
                                            debug=True)

>>>


---------

------------------------------------------------------------------------


------------------------------------------------------------------------

.step 4 'authentication and authorization'

---------
.p 'server auth'

.nt 'google login'
<<<

class LoginPage(webapp2.RequestHandler):
  def get(self):
    user = users.get_current_user()

    if user:
      self.redirect('/')
    else:
      self.redirect(users.create_login_url("/"))

class LogoutPage(webapp2.RequestHandler):
  def get(self):
    user = users.get_current_user()

    if user:
      self.redirect(users.create_logout_url(self.request.uri))
    else:
      self.redirect('/')
>>>
---------

and routing add
and client
and anything else
and apporpriate stubs

------------------------------------------------------------------------


------------------------------------------------------------------------

.step 5 'client app structure'

      this could be called the 'client UX'

      all the cascading events

---------

.p 'client display'

.nt 'initial fetch'

.nt 'clickables'

.nt 'photo display'

.nt 'editing'

---------


---------

.p 'display style'

---------

---------

.p 'client application structure'
   or CAS
   by "application structure" I mean the
   contingent, specific, substance,
   accidental part of the application.

.nt 'CAS init'
<<<
function main_init() {
	 p_ev('main_page');
}

function main_page() {
	 p_ev('primary_divs');
         p_ev('secondary_divs');
	 p_ev('user_controls');
}

function primary_divs() {
	 append_div('whole','title');
	 append_div('whole','contents');
	 append_div('whole','footer');
}
>>>

By stubs I literally mean bits that will start small
grow out and branch out.

.nt 'CAS stubs'
<<<

function secondary_divs() {	 
	 insert_html('title','Image gallery');
	 insert_html('contents','Images');
}

function user_controls() {
	 // I want to see a TEST button here
	 // that then writes somethings somewhere
	 // call it basic handler performance
}

>>>

.nt 'cas utilities'
<<<
function append_div(parent_id,new_child_id) {
         $('#'+parent_id).append('<div id="' +new_child_id+ '"></div>');
}

function insert_html(target_id,html) {
	 $('#'+target_id).html(html);
}

>>>

------------------------------------------------------------------------


------------------------------------------------------------------------

.step 6 'client server bridge: gets and sets'

      ties that ux to the server

---------

.p 'client crud'

.nt 'client ajax routine'
<<<

function ajaxReturn(xhr_url) {
    var return_string = '';
    $.ajax({
                dataType: "text",
                url : xhr_url,
                async: false,
                success : function (newContent) {
                   return_string = newContent;
                },
                error : function ()
                {
                }
    });
    return return_string;
}

>>>

.nt 'client handler create photo'
<<<

	//p_list = eval( ajaxReturn('/createPhoto/'+ p_type +'/'+ p_key+'/') );
>>>

.nt 'client read one'
<<<
	//p_list = eval( ajaxReturn('/getPhoto/'+ p_type +'/'+ p_key+'/') );

>>>

.nt 'client read list'
<<<
	//p_list = eval( ajaxReturn('/getPhotoList/'+ p_type +'/'+ p_key+'/') );
>>>

.nt 'client update caption'
<<<
	//p_list = eval( ajaxReturn('/updateCaption/'+ p_type +'/'+ p_key+'/') );
>>>

.nt 'client delete'
<<<
	//p_list = eval( ajaxReturn('/deletePhoto/'+ p_type +'/'+ p_key+'/') );
>>>

// maybe these should be separate nts?

// get list

// iterate through list to construct  photos html

// caption crud 


.nt 'data access layer?'
<<<


>>>


---------

------------------------------------------------------------------------


------------------------------------------------------------------------

.step 7 'server-fed UX'

 By which I mean client-side
 user interfaces / experiences that make use of 
 server side data (through an API)

---------

.p 'CAS stubs'

.nt 'CAS get list'
<<<

function getPhotoList() {
	photo_list = eval( ajaxReturn('/getPhotoList/') );
	return photo_list;
}

>>>

.nt 'CAS display lists'
<<<

function secondary_divs() {	 
	 // call ajax
	 pl = getPhotoList();
	 // make divs
	 insert_html('title','Image gallery');
	 insert_html('contents','Images');
}

>>>


.nt 'CAS control stub'
<<<
function user_controls() {
	 // I want to see a TEST button here
	 append_div('contents','program_controls');
	 append_div('contents','test_target');
    	 createButton('program_controls',0,150,40,40,'TEST','TEST ME',
                 "p_ev('test_callback',1000);"
    		 );
	 // that then writes somethings somewhere
	 // call it basic handler performance

	 // next step:
	 // make buttons for image close-ups	 
	 // I want to see a button here
	 // that then writes somethings somewhere
	 // call it basic handler performance
}

function test_callback() {
	 insert_html('test_target','BOOM');
}


function createButton(parent_name,x,y,w,h,name,text,cb) {
    var parent = document.getElementById(parent_name);
    var new_b = document.createElement('div');
    new_b.style['position'] = 'relative';
    new_b.style['top'] = y + 'px';
    new_b.style['left'] = x + 'px';
    new_b.style['width'] = w + 'px';
    new_b.style['height'] = h +'px';
    new_b.style['padding'] = '5px';
    new_b.style['margin'] = '2px';
    new_b.id = name;
    new_b.style['background'] = "#333333";
    new_b.style['color'] = "#ffffff";
    new_b.style['cursor'] = "pointer";
    new_b.innerHTML = text;
    // new_b.onclick(cb);                                                                                                                                                                                   
    new_b.setAttribute('onclick',cb);
    parent.appendChild(new_b);
}

>>>

------------------------------------------------------------------------


------------------------------------------------------------------------

.step 8 'admin page, roles, permissions'

------------------------------------------------------------------------


------------------------------------------------------------------------

.step 9 'ungenerate infrastructure'

The generative approach to DB ETL (extract, transform, load).
Need to be able to retrieve so you can regenerate and repopulate.

------------------------------------------------------------------------


------------------------------------------------------------------------

.step 10 'dashboards'

      UX modules really, high integrated expoeriences, for admin and user editing.

------------------------------------------------------------------------



otherwise the todo lists get lost, and we're only left with artifacts, 
and no way to correct the lists for people who follow us. which is a bit 
like not saving or showing or improving your work.
