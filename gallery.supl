gallery.supl

---------------------------

.sequence 'gallery app'

------------------

These are the aspects which connect and define the app:

a configuration for the platform
the server:
 a storage facility
 a cycle of access to storage on the server
the client (in our case delivered by the server):
 a cycle of commands on the client
 a display of those commands
 a styling of those displays

Some of these are things which, even if trivial, have default values, so
ignoring them is not necessarily keeping them out of the picture.

------------------

.step 1 'minimal stubs'

---------

.p 'start'
.nt 'external config'
.nt 'server'
.nt 'server client bridge'
.nt 'client'
.nt 'client style'

------------------

.step 2 'minimal end-to-end code'

---------

.p 'external config' 'app.yaml'

---
.nt 'external config values'
<<<

application: gallery
version: 1
runtime: python27
api_version: 1
threadsafe: true

>>>
---

---
.nt 'external config handlers'
<<<

handlers:
- url: /main\.js
  static_files: main.js
  upload: main\.js
  secure: always
  redirect_http_response_code: 301
- url: /main\.css
  static_files: main.css
  upload: main\.css
  secure: always
  redirect_http_response_code: 301
- url: /.*
  script: gallery.app
  secure: always
  redirect_http_response_code: 301

>>>
---

---------

.p 'server' 'gallery.py'

---
.nt 'server includes'
<<<

# gallery.py

import os
import cgi
import webapp2
import time

from google.appengine.ext import db
from google.appengine.ext.webapp import template
from google.appengine.api import users

>>>
---

---

.nt 'server db schema'
<<<

# DB Schema -- to do

>>>
---

---
.nt 'server delivers client'
<<<

class MainPage(webapp2.RequestHandler):
    def get(self):

    	template_values = {
    	}

    	path = os.path.join(os.path.dirname(__file__), 'index.html')
    	self.response.out.write(template.render(path, template_values))

>>>
---

---
.nt 'server db crud cycle'
<<<

    # access API - to do

>>>
---

---
.nt 'server demux'
<<<

app = webapp2.WSGIApplication(
                                     [('/', MainPage)],
                                            debug=True)

>>>
---


---------

.p 'server client bridge' 'index.html'

---
.nt 'to launch javascript'
<<<

<!DOCTYPE html>
<html style="height:100%;width:100%;">
    <head>
        <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
        <title>gallery</title>
        <script type="text/javascript" charset="utf-8" src="main.js"></script>
        <link type="text/css" rel="stylesheet" href="main.css"/>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
        <script>
            var page_type = "top";
            var type_key = "";
            var type_id = "";
        </script>
    </head>
    <body onload="central_handler('common_page',{})">
        <div class="whole">
            <div id="header">HEY HEY</div>
        </div>
    </body>
</html>

>>>
---
---------

---------
.p 'client' 'main.js'

---
.nt 'client central handler / event loop'
<<<

var event_queue = [];
var the_event = null;

// CENTRAL_HANDLER:
//  called by onload and setTimeout
function central_handler() {

    if (!(event_queue.length > 0)) {
    return;
    }
    the_event = event_queue.shift();

    // call event
    window[the_event.name]();

    // only loop until the stack is empty
    if (event_queue.length > 0) {
       setTimeout(function () {central_handler();},
       			     the_event.delay);
    }
}

>>>
---

---
.nt 'client crud'
<<<
	// api use - to do
>>>
---

---
.nt 'client display'
<<<
	// display data - to do
>>>
---
---------

---------
.p 'client style' 'main.css'

---
.nt 'heading'
<<<

body {
  margin: 25px;
  background-color: rgb(240,240,240);
  font-family: arial, sans-serif;
  font-size: 12px;
}

h1 {
  font-size: 24px;
  font-weight: bold;
  margin-top: 10px;
}

/* class="a_class" */
.whole { color: white; 
       	 height: 100%;
	 width: 100%;
}

/* id="an_id"> */
#header { color: orange; }

>>>
---

---------

------------------

.step 3 'authentication and roles'

------------------

.step 4 'ungenerate infrastructure'

The generative approach to DB ETL (extract, transform, load).
Need to be able to retrieve so you can regenerate and repopulate.

------------------

.step 5 'dashboards'

------------------





